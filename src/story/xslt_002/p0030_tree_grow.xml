<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" />
    <xsl:strip-space elements="*" />


    <xsl:template match="tree[not(request) and not(scene)]">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
            <xsl:element name="request">
                <xsl:attribute name="type">
                    <xsl:text>make_text</xsl:text>
                </xsl:attribute>
                <xsl:element name="positive_prompt_text">
                    <xsl:text>
A child selected emojis: </xsl:text>
                    <xsl:value-of select="ancestor::tree/prompt"/>
                    <xsl:value-of select="prompt"/>
                    <xsl:text>
Inspired by these you will write a story for the child.

Use writing style that is a mix of Mo Willems, Arnold Lobel, Roald Dahl, Edward Gorey, John Bellairs 
Show, Don't Tell: When possible reveal information using dialoge do not state it directly. 
Be concise. Avoid long poetic descriptions. Use simple language and avoid complex words.
Avoid clichés like "once upon a time" or "happily ever after." 
Make the story strange and funny or scary and exciting.

Reply only with the updated XML from below. Keep the XML structure unchanged. Only edit existing elements. 
                    </xsl:text>
                    <xsl:apply-templates select="/story/path/scene[1]"/>
                </xsl:element>
            </xsl:element>
        </xsl:copy>
    </xsl:template>


    <xsl:template match="scene[
            ancestor::tree
            and protagonist_reaction 
            and not(branch)
            and not(ancestor::request)
        ]">
        <xsl:variable name="scene" select="."/>
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="node()[not(name()='protagonist_reaction')]"/>
            
            <xsl:for-each select="protagonist_reaction">
                <xsl:variable name="protagonist_reaction" select="."/>
                <xsl:element name="branch">

                    <xsl:variable name="index" select="count(preceding-sibling::protagonist_reaction)+1"/>
                    <xsl:attribute name="index">
                        <xsl:value-of select="$index"/>
                    </xsl:attribute>

                    <xsl:apply-templates select="."/>

                    <xsl:element name="request">
                        <xsl:attribute name="type">
                            <xsl:text>make_text</xsl:text>
                        </xsl:attribute>

                        <xsl:element name="positive_prompt_text">
                            <xsl:text>
A child asked you for a story about the following emojis:</xsl:text>
                            <xsl:value-of select="ancestor::tree/prompt"/><xsl:text>
Your story so far is:
                            </xsl:text>

                            <xsl:call-template name="story_so_far">
                                <xsl:with-param name="last_scene" select="$scene"/>
                                <xsl:with-param name="protagonist_reaction" select="$protagonist_reaction"/>
                            </xsl:call-template>

<!-- 
    Every word should serve the purpose of conveying essential visual or auditory information, setting the mood, or advancing the story. 

For example, if a character is sad, do not say "The character was sad."  Instead, have another character ask "Why are you sad?" 
If a specific aspect is important, reveal it using dialoge between characters to show it. 
Clarity is Key: Children reading should have a good understanding. 
The last protagonist_reaction element says what happened last. 
-->


                            <xsl:text>
Please continue the story from that last protagonist_reaction decision above.
If the last protagonist_reaction decision was a bad decision tell the story how it lead to a bad outcome.

Use writing style that is a mix of Mo Willems, Arnold Lobel, Roald Dahl, Edward Gorey, John Bellairs 
Show, Don't Tell: When possible reveal information using dialoge do not state it directly. 
Be concise. Avoid long poetic descriptions. Use simple language and avoid complex words.
Avoid clichés like "once upon a time" or "happily ever after." 
Make the story strange and funny or scary and exciting.

Reply only with the updated XML from below. Keep the XML structure unchanged. Only edit existing elements. 
                            </xsl:text>
                            <xsl:apply-templates select="/story/path/scene[@index = $scene/@index+1]"/>
                        </xsl:element>
                    </xsl:element>

                </xsl:element>
            </xsl:for-each>
        </xsl:copy>
    </xsl:template>
    
    
    <xsl:template name="story_so_far">
        <xsl:param name="last_scene"/>
        <xsl:param name="protagonist_reaction"/>
        
        <xsl:element name="story_so_far">
            <xsl:for-each select="ancestor::scene">
                <xsl:element name="scene">
                    <xsl:apply-templates select="@*"/>
                    <xsl:apply-templates select="node()[
                            not(
                                name()='branch'
                                or name()='abc_music'
                                or name()='music'
                                or name()='sound'
                                or name()='illustration_title'
                                or name()='protagonist_reaction'
                            )
                        ]"/>
                    <!-- TODO add protagonist reactions to story history-->
                </xsl:element>
            </xsl:for-each>
            <xsl:copy-of select="$protagonist_reaction" />
        </xsl:element>

    </xsl:template>


    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

</xsl:stylesheet>
