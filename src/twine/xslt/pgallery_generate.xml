<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>

<xsl:template match="tree">

    <xsl:text><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
  .table-collage {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }
  .table {
    border-collapse: collapse;
    border: 1px solid #ccc;
    width: 100%;
  }
  .table img {
    width: 100%;
    height: auto;
  }
  .table td {
    padding: 10px;
    vertical-align: top;
  }
  .table-link {
    display: block;
    margin-top: 10px;
  }

  .table textarea {
    width: 100%;
    resize: none;
  }
</style>
<title>Image Collage</title>
</head>
<body>
    <div class="table-collage">
]]></xsl:text>

    <xsl:apply-templates select="scene"/>

    <xsl:text><![CDATA[
    </div>
    <script>

        function openLogsWindow(id){
            window.open(`http://aipif-2023.s3.us-west-1.amazonaws.com/_queue/make_picture-${id}-req.xml.log`, '_blank');
        }

        function sendUpdateRequest(element,id) {
            element.style.display = "none";
            const prompt = document.getElementById(id).value;
            fetch("http://18.222.213.41:8080/pe", {
                method: "POST",
                headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({id, prompt})
                })
                .then(response => response.text())
                .then(data => {
                    console.log("Response:", data);
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }

        function sendRetyRequest(element,id) {
            const url = `http://18.222.213.41:8080/pr?id=${id}`;
            element.style.display = "none";
            // make the GET request using the Fetch API
            fetch(url, {
                method: 'GET',
            })
            .then(response => {
                if (response.ok) {
                    return response;
                }
                throw new Error('Network response was not ok.');
            })
            .then(data => {
                console.log(data);
                
            })
            .catch(error => {
                console.log('There was a problem with the fetch operation:', error.message);
            });

            
        }

        const defaultImageUrl = "http://aipif-2023.s3.amazonaws.com/static/generating.png"; // Replace with the actual default image URL
        const images = document.getElementsByTagName("img");

        for (let i = 0; i < images.length; i++) {
            images[i].addEventListener("error", function() {
                this.src = defaultImageUrl;
            });
        }
    </script>
</body>
</html>
]]></xsl:text>

</xsl:template>


<xsl:template match="scene">
    <xsl:text><![CDATA[
    <div class="table">
        <img src="]]></xsl:text>
    <xsl:value-of select="illustration/@url"/>
    <xsl:text><![CDATA[">
                <textarea id="]]></xsl:text>
                <xsl:value-of select="illustration/@rq_id"/>
                <xsl:text><![CDATA[" rows="5" style="width: 100%;">
]]></xsl:text>
    <xsl:value-of select="normalize-space(illustration)"/>
    <xsl:text><![CDATA[
</textarea>
        <div>
                <button onclick="sendUpdateRequest(this,']]></xsl:text>
            <xsl:value-of select="illustration/@rq_id"/>
    <xsl:text><![CDATA[')">UPDATE</button>
              <button onclick="sendRetyRequest(this,']]></xsl:text>
            <xsl:value-of select="illustration/@rq_id"/>
            <xsl:text><![CDATA[')">RETRY</button>
              <button onclick="openLogsWindow(']]></xsl:text>
            <xsl:value-of select="illustration/@rq_id"/>
            <xsl:text><![CDATA[')">LOGS</button>
        </div>
    </div>]]></xsl:text>

    <xsl:choose>
        <xsl:when test="branch">
            <xsl:text>
</xsl:text>
            <xsl:apply-templates select="branch/scene"/>

        </xsl:when>

    </xsl:choose>

</xsl:template>

</xsl:stylesheet>
